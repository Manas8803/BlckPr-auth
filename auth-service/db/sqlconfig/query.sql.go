// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users ( email, password, role, isverified, otp)
VALUES ($1, $2, $3, false, $4)
RETURNING id, email, password, isverified, role, otp
`

type CreateUserParams struct {
	Email    string
	Password string
	Role     string
	Otp      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.Otp,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Isverified,
		&i.Role,
		&i.Otp,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, isverified, role, otp FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Isverified,
		&i.Role,
		&i.Otp,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET isverified = TRUE
WHERE email = $1
`

func (q *Queries) UpdateUser(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, updateUser, email)
	return err
}
