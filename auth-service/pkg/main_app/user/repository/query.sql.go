// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: query.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    firstname, middlename, lastname, email, password, otp, created_at,updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, CURRENT_TIMESTAMP,CURRENT_TIMESTAMP
)
RETURNING id, firstname, middlename, lastname, email, password, created_at, updated_at, is_verified, otp
`

type CreateUserParams struct {
	Firstname  string
	Middlename string
	Lastname   string
	Email      string
	Password   string
	Otp        string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Firstname,
		arg.Middlename,
		arg.Lastname,
		arg.Email,
		arg.Password,
		arg.Otp,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Middlename,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsVerified,
		&i.Otp,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, firstname, middlename, lastname, email, password, created_at, updated_at, is_verified, otp FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Firstname,
		&i.Middlename,
		&i.Lastname,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsVerified,
		&i.Otp,
	)
	return i, err
}

const updateUserByEmail = `-- name: UpdateUserByEmail :exec
UPDATE users SET is_verified = TRUE WHERE email = $1
`

func (q *Queries) UpdateUserByEmail(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, updateUserByEmail, email)
	return err
}
